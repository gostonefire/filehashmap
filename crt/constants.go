package crt

// Do not assign 0 (zero) to any of the Collision Resolution Techniques. Zero is used to denote for ReorgConf that no
// change in technique is needed.
const (
	// OpenChaining - Represents the collision resolution technique by adding linked list to bucket when collision occurs
	//
	// The Hashing technique, which uses a linked list to handle collisions, is termed as separate chaining.
	//
	//Different elements at the same position in the hash table are stored in a linked list.
	OpenChaining int = 1

	// LinearProbing - Represents the collision resolution technique where a linear search for a free bucket is used to resolve collision
	//
	// Linear Probing is a simple collision resolution technique in Open Addressing. In case of a collision, it probes through the hash table linearly,
	// looking for an empty slot, and assigns the free slot to the value.
	//
	// However, it suffers from the problems of primary clustering, i.e., large blocks of cells in the hash table are continuously occupied,
	// which makes the probe sequence quite lengthy.
	LinearProbing int = 2

	// QuadraticProbing - Represents the collision resolution technique where a quadratic search for a free bucket is used to resolve collision
	//
	// In quadratic probing, when a collision occurs, we probe the hash table for the iÂ² th bucket in the i th iteration,
	// and we keep iterating till a suitable empty slot is found.
	//
	// It suffers from the problem of secondary clustering, which means it may take a much longer time before insertion is made into the table.
	QuadraticProbing int = 3

	// DoubleHashing - Represents the collision resolution technique where the use of two hashing algorithm work in pair to resolve collision.
	//
	// It deploys the idea of using a 2nd hash function in case of a collision.
	//
	//It uses the hash value generated by the first hash function as the starting point. In case of a collision,
	// the second hash function, which is independent of the original function, determines the final location of the next value.
	DoubleHashing int = 4
)
